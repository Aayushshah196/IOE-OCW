# Generated by Django 4.0.1 on 2022-02-05 07:40

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('is_instructor', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('isInstructor', models.BooleanField(default=False)),
                ('image', models.ImageField(null=True, upload_to='')),
                ('dob', models.DateField()),
                ('date_joined', models.DateField(auto_now_add=True)),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'Student'), (2, 'Instructor')], default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Courses',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('summary', models.CharField(default='Test summary', max_length=200)),
                ('duration', models.PositiveSmallIntegerField(default=6)),
                ('thumbnail', models.ImageField(null=True, upload_to='thumbnail')),
                ('pace', models.CharField(default='self', max_length=10)),
                ('subject', models.CharField(default='Computer science', max_length=100)),
                ('start_date', models.DateField(default=datetime.date(2022, 2, 5))),
                ('difficulty', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='Beginner', max_length=20)),
                ('cost', models.IntegerField(default=0)),
                ('entry_date', models.DateTimeField(default=datetime.datetime(2022, 2, 5, 13, 25, 35, 453554))),
                ('instructor', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(default=None, max_length=100)),
                ('description', models.CharField(default=None, max_length=200)),
                ('video', models.FileField(default=None, null=True, upload_to='Lessons', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])])),
                ('date_uploaded', models.DateTimeField(default=django.utils.timezone.now)),
                ('material', models.FileField(null=True, upload_to='Material', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'png', 'docx', 'txt'])])),
                ('course', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='ocw.courses')),
                ('instructor', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(default=datetime.datetime(2022, 2, 5, 13, 25, 35, 469181))),
                ('course', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='ocw.courses')),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(default=None, max_length=200)),
                ('lesson', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='ocw.lesson')),
                ('user', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
